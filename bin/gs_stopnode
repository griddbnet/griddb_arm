#!/usr/bin/python3 -B
# coding=UTF-8

import sys
import log
import os
import json
import time
import signal
import copy
from optparse import OptionParser
from optparse import SUPPRESS_HELP
from typing import Optional

import util_client
util_client.install_sigint_handler()
(homedir,logdir) = util_client.get_required_env()

confdir = os.path.join(homedir, "conf")
pidfile = os.path.join(confdir, "gridstore.pid")

parser = OptionParser(usage="%prog [-f] [-w [WAIT_TIME]] " + util_client.CLIENT_OPTIONS_USAGE+"\n       %prog -k [-w [WAIT_TIME]]",
                      description="Stop the GridDB node.",
            version="%prog [V5.0.00]")
util_client.add_client_options(parser)
parser.add_option("-f", "--force", dest="force",
                  action="store_true", default=False,
                  help="Stop forcibly the GridDB node.")
parser.add_option("-w", "--wait", action='callback', callback=\
                    util_client.optional_arg(0), dest="wait_time",default=None,
                  help="Wait for the node to stop.")
parser.add_option("--rc", dest="rc",
                  action="store_true", default=False,
                  help=SUPPRESS_HELP)
parser.add_option("-k", "--kill", dest="kill",
                  action="store_true", default=False,
                  help="Forcibly stop the node process on the local machine.")
(options, args) = parser.parse_args()
# REST通信時SSL接続を行うか判断 デフォルトのポート番号を設定
util_client.decide_use_ssl_and_port(options)

if options.username is None and not options.rc and not options.kill:
    print("B00001: User and password are required."+" (-u USER/PASS)")
    sys.exit(2)
if options.wait_time is not None:
    try:
        wait_time = int(options.wait_time)
    except ValueError:
        print("B00002: Specify seconds to wait. (-w WAIT_TIME)")
        sys.exit(2)

if options.kill:
    if options.force:
        print("B00112: --kill option and --force option cannot be specified at same time.")
        sys.exit(2)
    if "-s" in sys.argv or "--server" in sys.argv or "-p" in sys.argv or "--port" in sys.argv:
        print("B00110: --kill option and --server|--port option cannot be specified at same time.")
        sys.exit(2)
    if options.username is not None:
        print("B00111: --kill option and --user option cannot be specified at same time.")
        sys.exit(2)

log = log.logger(__file__, log.DEBUG)
log.info("%s start." % (__file__))
tmpoptions = copy.deepcopy(options)
tmpoptions.password = "***"
log.info(tmpoptions)

if options.rc or options.kill:
    # プロセス停止
    pid = util_client.getpid(pidfile)
    if pid is None:
        print("B00101: Failed to obtain the PID.")
        print("Check whether a node has been started.")
        log.error("B00101: Failed to obtain the PID. (path="+pidfile+")")
        sys.exit(1)

    if util_client.psexists(pid, "gsserver") == 0:
        print("B00103: The GridDB node has not been started.")
        log.error("B00103: The GridDB node has not been started. (pid="+str(pid)+")")
        sys.exit(3)
        
    print("The GridDB node is stopped.")
    log.info("The GridDB node is stopped. (pid="+str(pid)+")")
    if options.kill:
        os.kill(int(pid), signal.SIGKILL)
    else:
        os.kill(int(pid), signal.SIGTERM)
    code = 200
    if options.wait_time is not None:
        if wait_time == 0:
            while util_client.psexists(pid, "gsserver"):
                util_client.wait_one_sec()
            print("\nThe GridDB node has been stopped.")
        else:
            i = 0
            while i < wait_time:
                util_client.wait_one_sec()
                m = util_client.psexists(pid, "gsserver")
                if not m:
                    print("\nThe GridDB node has been stopped.")
                    break
                i += 1
            if m:
                print("\nB00104: Timeout expired. Check the status of the node.")
                log.warning("B00104: Timeout expired. Check the status of the node.")
                sys.exit(2)
    log.info("%s end." % (__file__))
    sys.exit(0)

else:
    # RESTを用いた停止
    if not options.force:
        nodestat: Optional[str] = util_client.get_nodestat(options, log)
        if nodestat != "INACTIVE":
            e = 1
            if nodestat is not None:
                if nodestat == "ACTIVE":
                    print("B00105: The GridDB node cannot be stopped when the node joins to the GridDB cluster.")
                    log.error("B00105: The GridDB node cannot be stopped when the node joins to the GridDB cluster. (status="+nodestat+")")
                    e = 3
                elif nodestat == "NORMAL_SHUTDOWN":
                    print("B00106: The GridDB node is being stopped.")
                    log.error("B00106: The GridDB node is being stopped. (status="+nodestat+")")
                    e = 3
                else:
                    print("B00107: Check the status of the node.")
                    log.error("B00107: Check the status of the node. (status="+nodestat+")")
            else:
                log.error("B00108: failed to get the node status.")
            sys.exit(e)

        print("The GridDB node is stopped.")
    else:
        print("The GridDB node is forced to stop.")
    

    method = "POST"
    path = "/node/shutdown"
    data = { "force": str(options.force).lower() }
    (res, code) = util_client.request_rest(method, path, data, options, log)

    if code != 200:
        log.error("B00109: failed to stop node.")
        sys.exit(1)

    if options.wait_time is not None:
        method = "GET"
        path = "/node/stat"
        data = None
        res = 1
        options.silent = 1
        e = 0
        sleep_time = 0
        while res is not None:
            util_client.wait_one_sec()
            sleep_time += 1
            (res, code) = util_client.request_rest(method, path, data, options, log)
            if code == 401:
                e = 1
                break
            if sleep_time == wait_time:
                e = 2
                break
        util_client.wait_error_case(e,log,"\nThe GridDB node has been stopped.")
        log.info("%s end." % (__file__))
        sys.exit(e)

    log.info("%s end." % (__file__))

