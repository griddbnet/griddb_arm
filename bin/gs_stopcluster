#!/usr/bin/python3 -B
# coding=UTF-8

import sys
import log
import os
import copy
from optparse import OptionParser
from typing import Optional

import util_client
util_client.install_sigint_handler()
(homedir,logdir) = util_client.get_required_env()

parser = OptionParser(usage="%prog [-w [WAIT_TIME]]" + util_client.CLIENT_OPTIONS_USAGE,
                      description="Stop the GridDB cluster.",
                      version="%prog [V5.0.00]")
util_client.add_client_options(parser)
parser.add_option("-w", "--wait", action='callback', callback=\
                  util_client.optional_arg(0), dest="wait_time",default=None,
                  help="Wait for the GridDB cluster to stop.")
(options, args) = parser.parse_args()
# REST通信時SSL接続を行うか判断 デフォルトのポート番号を設定
util_client.decide_use_ssl_and_port(options)

if options.username is None:
    print("AF0001: User and password are required."+" (-u USER/PASS)")
    sys.exit(2)
if options.wait_time is not None:
    try:
        wait_time = int(options.wait_time)
    except ValueError:
        print("AF0002: Specify seconds to wait. (-w WAIT_TIME)")
        sys.exit(2)

log = log.logger(__file__, log.DEBUG)
log.info("%s start." % (__file__))
tmpoptions = copy.deepcopy(options)
tmpoptions.password = "***"
log.info(tmpoptions)

e = 0
nodestat: Optional[str] = util_client.get_nodestat(options, log)
if nodestat != "ACTIVE":
    e = 1
    if nodestat is not None:
        if nodestat == "INACTIVE":
            print("AF0101: The node has not joined to the GridDB cluster.")
            log.error("AF0101: Node is not joined. (status="+nodestat+")")
            e = 3
        else:
            print("AF0102: Check the status of the node.")
            log.error("AF0102: Check the status of the node. (status="+nodestat+")")
    else:
        log.error("AF0106: failed to stop cluster.")
    sys.exit(e)

c = util_client.is_active_cluster(options, log)
if c is None:
    print("AF0103: Check the status of the node.")
    log.error("AF0103: Check the status of the node.")
    sys.exit(1)
elif not c:
    print("AF0104: The GridDB cluster has not been started.")
    log.error("AF0104: The GridDB cluster has not been started.")
    sys.exit(3)

(options.server,options.port) = util_client.get_master_addr(options,log)
if options.server is None:
    print("AF0105: Failed to obtain the address of the master node.")
    log.info("AF0105: Failed to obtain the address of the master node.")
    sys.exit(1)

log.info("request stop the cluster (master="+options.server+":"+str(options.port)+")")
method = "POST"
path = "/cluster/stop"
data = {}
(res, code) = util_client.request_rest(method, path, data, options, log)
if code != 200:
    log.error("AF0108: Failed to stop the cluster.")
    sys.exit(1)

if options.wait_time is not None:
    sleep_time = 0
    while nodestat != "INACTIVE":
        util_client.wait_one_sec()
        sleep_time += 1
        nodestat = util_client.get_nodestat(options, log)
        if nodestat is None:
            e = 1
            break
        if sleep_time == wait_time:
            e = 2
            break
    util_client.wait_error_case(e,log,"\nThe GridDB cluster has been stopped.")
    log.info("%s end." % (__file__))
    sys.exit(e)

if code != 200:
    log.error("AF0107: Failed to stop the cluster.")
    sys.exit(1)

log.info("%s end." % (__file__))

